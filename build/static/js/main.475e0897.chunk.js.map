{"version":3,"sources":["restful.js","App.js","serviceWorker.js","index.js"],"names":["resource","axios","get","then","res","data","obj","post","resouce","id","delete","put","result","Filter","searchTerm","setSearchTerm","type","value","onChange","event","target","Persons","persons","deletePerson","map","person","index","key","name","number","style","onClick","window","confirm","PersonForm","formProcess","newName","newNumber","setNewName","setNewNumber","onSubmit","Notification","message","isWarning","length","msgStyle","border","borderRadius","color","fontSize","backgroundColor","padding","App","useState","setPersons","personsSearch","setPersonsSearch","setMessage","setIsWarning","useEffect","reqs","response","filter","toLowerCase","includes","preventDefault","existsPerson","trim","newPerson","concat","catch","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.475e0897.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst BASE_URL = '/api'\r\nconst get = (resource) => axios\r\n                        .get(`${BASE_URL}/${resource}`)\r\n                        .then(res => res.data);\r\n\r\nconst post = (resource, obj) => axios\r\n                               .post(\r\n                                   `${BASE_URL}/${resource}`, \r\n                                    obj)\r\n                                .then(res=> res.data);\r\n\r\nconst remove = (resouce, id) => axios\r\n                                .delete(`${BASE_URL}/${resouce}/${id}`)\r\n\r\nconst put = (resouce, id, obj) => axios\r\n                             .put(`${BASE_URL}/${resouce}/${id}`, obj)\r\n                             .then(result => result.data);\r\n\r\nexport default {get, post, remove, put}","import React, { useState, useEffect  } from 'react'\nimport reqs from './restful'\n\n\nconst Filter = ({searchTerm, setSearchTerm}) => <>\n filter shown with <input type='text' value={searchTerm} onChange={(event) => setSearchTerm(event.target.value)} />\n </>\n\nconst Persons = ({persons, deletePerson}) => persons.map( \n      (person, index) => \n        <div key={person.name}>\n          <span>{person.name} {person.number}</span>\n          <button style={{\"display\":\"inline-block\"}}\n          onClick={() => window.confirm(`Delete ${person.name} ?`) ? deletePerson(person.id) : null}>Delete</button>\n        </div> )\n\nconst PersonForm = ({formProcess, newName, newNumber, setNewName, setNewNumber}) => <>\n      <form onSubmit={ (event)=>formProcess(event) }>\n        <div>\n          name: <input value={newName} onChange={(event) => setNewName(event.target.value)} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={(event) => setNewNumber(event.target.value)} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n</>\nconst Notification = ({message, isWarning}) => {\n  if (message.length === 0)\n    return null;\n   \n   let msgStyle = {\n    border : \"1px solid green\",\n    borderRadius: \"5px\",\n    color: \"green\",\n    fontSize: \"18px\",\n    backgroundColor: \"#eee\",\n    padding: \"10px\"\n  }\n  if(isWarning){\n   msgStyle = {...msgStyle, color:\"red\", border:\"1px solid red\"} \n  }\n  return <div style={msgStyle}>\n    <span>{message}</span>\n  </div>\n}\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ searchTerm, setSearchTerm] = useState('');\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ personsSearch, setPersonsSearch] = useState(persons);\n  const [ message, setMessage] = useState('');\n  const [isWarning, setIsWarning] = useState(false);\n  const deletePerson = (index) => \n                                  reqs.remove('persons', index)\n                                  .then(() => setPersons(persons.filter(person => person.id !== index)))\n                                  .catch(() => {\n                                      setPersons(persons.filter(person => person.id !== index));\n                                      setMessage('This person was already removed from the server.')\n                                      setIsWarning(true);\n                                  });\n  const formSearch = () => {\n    if(searchTerm)\n      setPersonsSearch(\n        persons.filter(person => \n          person.name.toLowerCase().includes(searchTerm.toLowerCase())));\n    else\n        setPersonsSearch(persons);\n    }\n  \n\n  useEffect(() => {\n    reqs\n    .get('persons')\n      .then(response => {\n        setPersons(response);\n      });\n\n      \n  },[]);\n\n  /* Moniters `persons` variable */\n  useEffect(formSearch, [persons, searchTerm]);\n  const getPerson = () => persons.filter(person => person.name.toLowerCase() === newName.trim().toLowerCase());\n  const formProcess= (event) => {\n    event.preventDefault();\n    const existsPerson =  getPerson();\n    if(newName.trim().length === 0)\n    {\n      setMessage('Please enter a valid name');\n      setIsWarning(true);\n      return;\n    }\n    if(existsPerson.length >= 1){\n      const newPerson = {...existsPerson[0]};\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        newPerson['number'] = newNumber;\n        reqs.put('persons', newPerson.id, newPerson);\n      } \n      \n      setPersons(persons.map(person => person.id === newPerson.id ? newPerson : person));\n    } else {\n      const newPerson = {name: newName.trim(), number: newNumber.trim()}\n      reqs.post('persons', newPerson).then(res => setPersons(persons.concat(res)));\n      setMessage(`${newPerson.name} has been added.`);\n      setIsWarning(false);\n    }\n\n    \n    setNewName('');\n    setNewNumber('');\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} isWarning={isWarning}></Notification>\n      <Filter searchTerm={searchTerm} setSearchTerm={setSearchTerm}></Filter>\n      <h3>add a new</h3>\n      <PersonForm\n            setNewName = {setNewName}\n            setNewNumber = {setNewNumber}\n            formProcess = {formProcess}\n            newName = {newName}\n            newNumber = {newNumber}\n      ></PersonForm>\n      <h3>Numbers</h3>\n      <Persons persons={personsSearch} deletePerson={deletePerson}></Persons>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}